// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.1.0"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'idea'
apply plugin: 'java'

repositories {
    maven { // The repo from which to get VS
        url "https://maven.daporkchop.net/"
    }
    maven { // The repo from which to get waila
        url "http://www.mobiusstrip.eu/maven"
    }
    maven { // the repo from which to get NEI and stuff
        url "http://chickenbones.net/maven/"
    }
    maven {
        url "https://maven.cil.li/"
    }
    maven { // the repo from which to get EnderIO and tterrags mods
        url "https://maven.tterrag.com/"
    }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // CoFH
        name = "Covers Maven"
        url = "http://maven.covers1624.net"
    }
    maven {
        url "https://maven.mcmoddev.com"
    }
    maven {
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        url = "https://maven.blamejared.com/"
    }
}

sourceCompatibility = targetCompatibility = 1.8
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

version = "${mod_version}"
if (hasProperty('appendBuildNumber')) {
    version = version + "-" + appendBuildNumber.toString()
} else {
    version = version + "-0"
}

group = "${group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_id}-${minecraft_version}"


minecraft {
    version = "${forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171212"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    useDepAts = true
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

dependencies {
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
    deobfCompile "cofh:RedstoneFlux:${minecraft_version_short}-${redstoneflux_version}:deobf"
    compile "net.darkhax.tesla:Tesla-${minecraft_version_short}:${tesla_version}"
    deobfCompile "mcp.mobius.waila:Hwyla:${hwyla_version}_${minecraft_version_short}:api"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-${minecraft_version_short}:${minecraft_version_short}-${top_version}"
    deobfCompile "li.cil.oc:OpenComputers:MC${minecraft_version_short}.1-${oc_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testCompile("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testCompile("org.junit.platform:junit-platform-launcher:1.1.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

junitPlatform {
    platformVersion '1.0.3'
    enableStandardTestTask true
}

tasks.build.dependsOn deobfJar, sourceJar

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            groupId group_prefix
            version minecraft_version + "-" + project.version
            artifactId mod_id
            artifact jar
            artifact sourceJar
            artifact deobfJar
        }
    }
    repositories {
        mavenLocal()
    }
}

//// DETECTING COMMIT NAME AND ACTIVATING CURSE RELEASE \\\\

def commit_release_type = getCommmitReleaseType()

def getCommmitReleaseType() {
    if (project.hasProperty("curseforge_key")) {
        def stdout = new ByteArrayOutputStream()
        try {
            exec {
                commandLine 'git', 'log', '-1', '--pretty=tformat:%s'
                standardOutput = stdout
            }
        } catch (Exception e) {
            System.print("SKIPPING CURSE RELEASE - FAILED TO RETRIEVE LAST COMMIT")
            e.printStackTrace()
            return 'none'
        }
        String commit = stdout.toString().trim()

        if (commit.startsWith("CRelease") || commit.startsWith("crelease")) {
            System.out.println("FOUND NEW RELEASE - COMMIT: ".concat(commit)); return 'release'
        } else if (commit.startsWith("CBeta") || commit.startsWith("cbeta")) {
            System.out.println("FOUND NEW BETA - COMMIT: ".concat(commit)); return 'beta'
        } else if (commit.startsWith("CAlpha") || commit.startsWith("calpha")) {
            System.out.println("FOUND NEW ALPHA - COMMIT: ".concat(commit)); return 'alpha'
        } else {
            System.out.println("SKIPPING CURSE RELEASE - COMMIT: " + commit); return 'none'
        }
    }
    System.out.println("SKIPPING CURSE RELEASE - NO CURSE API KEY")
    return 'none'
}

tasks.curseforge.enabled = project.hasProperty("curseforge_key") && commit_release_type != 'none'
curseforge {
    if (project.hasProperty("curseforge_key") && commit_release_type != 'none') {
        System.out.println("ATTEMPTING CURSE RELEASE")
        apiKey = project.properties["curseforge_key"]
    } else {
        return
    }
    project {
        id = curse_project_id

        relations {
            optionalDependency 'ompd'
            optionalDependency 'openmodularturrets'
            optionalDependency 'redstone-flux'
        }

        mainArtifact(jar) {
            releaseType = commit_release_type
            changelog = file("${projectDir}/change_log.html").text
            changelogType = 'html'
        }

        addArtifact(sourceJar) {
            releaseType = 'alpha'
            changelog = file("${projectDir}/change_log.html").text
            changelogType = 'html'
        }

        addArtifact(deobfJar) {
            releaseType = 'alpha'
            changelog = file("${projectDir}/change_log.html").text
            changelogType = 'html'
        }
    }
}
